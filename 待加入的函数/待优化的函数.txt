#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <wingdi.h>
#include <minwindef.h>
#include "svpng.inc"

typedef unsigned char BYTE;
typedef long LONG;


size_t read_data_hex(unsigned char* pucBuff, size_t uiBuffSize, const char* pcFileNm)
{
    FILE* fp;;
    fopen_s(&fp, pcFileNm, "rb");
    if (NULL == fp)
    {
        printf("file [%s] open Fail!\n", pcFileNm);
        return -1;
    }
    size_t iRet = fread(pucBuff, sizeof(char), uiBuffSize, fp);
    fclose(fp);
    return iRet;
}


/******************************************************************************
*函数功能：将8位位图转换为24位位图
*函数声明：
   BOOL Bitmap8To24(
    BYTE* srcImage,  -指向源图像的像素数据的指针
    BYTE* dstImage,  -指向目的图像的像素数据的指针
    LONG imageWidth, -源图像的宽度(像素数)
    LONG imageHeight -源图像的高度(像素数)
    )
******************************************************************************/
bool Bitmap8To24(BYTE* srcImage, BYTE* dstImage, LONG imageWidth, LONG imageHeight);

bool Bitmap8To24(BYTE* srcImage, BYTE* dstImage, LONG imageWidth, LONG imageHeight)
{
    LONG lLineBytes24 = ((imageWidth * 24 + 31) / 32 * 4);
    LONG lLineBytes8 = ((imageWidth * 8 + 31) / 32 * 4);
    int n, j;
    for (int i = 0; i < imageHeight; i++)
    {
        for (j = 0, n = 0; j < lLineBytes8; j++, n++)
        {
            BYTE gray = *(srcImage + lLineBytes8 * i + j);
            *(dstImage + lLineBytes24 * i + n) = gray;
            n++;
            *(dstImage + lLineBytes24 * i + n) = gray;
            n++;
            *(dstImage + lLineBytes24 * i + n) = gray;
        }
    }

    return true;
}



int main() {
    FILE* out;
    fopen_s(&out, "2.bmp", "w+b");
    int m_nBitCount = 24;
    LONG m_nHeight = 200;
    LONG m_nWidth = 500;
   // m_lLineBytes = GetWidthBytes(m_nWidth, m_nBitCount);
    
    RGBQUAD rgbquad[256];

    BYTE* srcImage = (BYTE*)malloc(500 * 200);
    BYTE* dstImage = (BYTE*)malloc(500 * 200 * 3);

    LONG lLineBytes24 = ((m_nWidth * 24 + 31) / 32 * 4);
    LONG lLineBytes8 = ((m_nWidth * 8 + 31) / 32 * 4);
    LONG m_lLineBytes = lLineBytes24;


    for (int p = 0; p < 256; p++)
    {
        rgbquad[p].rgbBlue = (BYTE)p;
        rgbquad[p].rgbGreen = (BYTE)p;
        rgbquad[p].rgbRed = (BYTE)p;
        rgbquad[p].rgbReserved = (BYTE)0;
    }

    read_data_hex(srcImage, 500 * 200, "c:\\raw.data");

    Bitmap8To24(srcImage, dstImage, m_nWidth, m_nHeight);


    //建立一个位图文件头变量，并为此变量赋值
    BITMAPFILEHEADER bf;
    if (m_nBitCount == 8)
    {
        //如果位图是8位的，则位图像素数据的偏移地址就为位图前三部分的字节数之和
        //即为：文件头+信息头+调色板的大小
        bf.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 256;
    }
    else if (m_nBitCount == 24)
    {
        //如果位图是24位的，则位图像素数据的偏移地址就为位图的前两部分的字节数之和
        //即为：文件头+信息头
        bf.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
    }
    else
    {
        printf("暂时只能保存8或24位位图\n");
        return false;
    }
    //将位图文件头中的保留为都置零
    bf.bfReserved1 = 0;
    bf.bfReserved2 = 0;
    if (m_nBitCount == 8)
    {
        //如果位图为8位的，则位图文件大小就为位图的四部分之和
        //即为：文件头+信息头+调色板+像素数据
        bf.bfSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 256 + m_nHeight * m_lLineBytes;
    }
    else if (m_nBitCount == 24)
    {
        //如果位图为24位的，则位图文件大小就为位图的三部分之和
        //即为：文件头+信息头+像素数据
        bf.bfSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + m_nHeight * m_lLineBytes;
    }
    else
    {
        printf("暂时只能保存8或24位位图\n");
        return false;
    }
    //位图文件的类型为BM
    bf.bfType = ((WORD)'M' << 8 | 'B');
    //将位图文件头写入文件
    fwrite(&bf, sizeof(BITMAPFILEHEADER),1,out);

    //建立位图信息头，并准备为其各项赋值
    BITMAPINFOHEADER bi;
    //将位图的位数存入信息头的biBitCount中
    bi.biBitCount = m_nBitCount;
    //将图像显示有重要影响的颜色索引的数目，如果是0，表示都重要
    bi.biClrImportant = 0;
    //说明位图实际使用的彩色表中的颜色索引数（设为0的话，则说明使用所有调色板项）
    bi.biClrUsed = 0;
    //目标设备说明位面数，其值总是被设为1
    bi.biPlanes = 1;
    //说明图像数据压缩的类型
    bi.biCompression = 0L;
    //说明图像的宽度，以像素为单位
    bi.biHeight = m_nHeight;
    //说明图像的宽度，以像素为单位
    bi.biWidth = m_nWidth;
    //说明BITMAPINFOHEADER结构所需要的字节数
    bi.biSize = sizeof(BITMAPINFOHEADER);
    //说明图像的大小，以字节为单位。当用BI_RGB格式时，可设置为0
    bi.biSizeImage = m_nHeight * m_lLineBytes;
    //说明图像的水平分辨率，用像素/米来表示
    bi.biXPelsPerMeter = 0;
    //说明图像的垂直分辨率，用像素/米来表示
    bi.biYPelsPerMeter = 0;
    //将信息头写入文件
    fwrite(&bi, sizeof(BITMAPINFOHEADER),1,out);

    if (m_nBitCount == 8)
    {
        //如果是8位位图，还需要写入调色板
        fwrite(&rgbquad, sizeof(RGBQUAD), sizeof(rgbquad) / sizeof(RGBQUAD), out);
        //写入像素数据
        fwrite(srcImage, m_nHeight * m_lLineBytes,1,out);
        //关闭文件
        fclose(out);
    }
    else if (m_nBitCount == 24)
    {
        //写入像素数据
        fwrite(dstImage, m_nHeight * m_lLineBytes,1,out);
        //关闭文件
        fclose(out);
    }
    else
    {
        fclose(out);
        printf("只能写入8或24位位图\n");
        return false;
    }
   

    FILE* fp = fopen("rgb.png", "wb");
    svpng(fp, m_nWidth, m_nHeight, dstImage, 0);
    fclose(fp);

    free(srcImage);
    free(dstImage);

    return true;
}


